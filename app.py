import os
from flask import Flask, request, jsonify
from flask_sqlalchemy import SQLAlchemy
from flask_mail import Mail, Message
from werkzeug.utils import secure_filename
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from google.oauth2 import service_account

app = Flask(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///orders.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã (Gmail SMTP)
app.config['MAX_CONTENT_LENGTH'] = 1024 * 1024 * 1024  # 1 –ì–ë
app.config['MAIL_SERVER'] = 'smtp.mail.ru'
app.config['MAIL_PORT'] = 465
app.config['MAIL_USE_SSL'] = True
app.config['MAIL_USERNAME'] = 'gorunum@mail.ru'
app.config['MAIL_PASSWORD'] = 'uCEbshNMx3uSV2YyEXNv'
app.config['MAIL_DEFAULT_SENDER'] = 'gorunum@mail.ru'

mail = Mail(app)

# Google Drive API
import json
import os
import shutil

MAX_STORAGE_MB = 10000  # 10 –ì–ë

def get_folder_size(folder):
    """–ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏ –≤ –º–µ–≥–∞–±–∞–π—Ç–∞—Ö."""
    total_size = 0
    for dirpath, _, filenames in os.walk(folder):
        for f in filenames:
            fp = os.path.join(dirpath, f)
            if os.path.exists(fp):
                total_size += os.path.getsize(fp)
    return total_size / (1024 * 1024)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ MB

def cleanup_storage(folder="uploads"):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç."""
    if not os.path.exists(folder):
        return
    
    while get_folder_size(folder) > MAX_STORAGE_MB:
        files = [(f, os.path.getctime(os.path.join(folder, f))) for f in os.listdir(folder)]
        files.sort(key=lambda x: x[1])  # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (—Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–≤—ã–º–∏)

        if files:
            oldest_file = os.path.join(folder, files[0][0])
            print(f"üóë –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª {oldest_file}, —Ç–∞–∫ –∫–∞–∫ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")
            os.remove(oldest_file)
        else:
            break

SCOPES = ['https://www.googleapis.com/auth/drive.file']
FOLDER_ID = '1FPnyzcyYvQn0fTNpdVf-PazNJBUARpni'  # ID —Ç–≤–æ–µ–π –ø–∞–ø–∫–∏ –Ω–∞ Google Drive 

# –ß–∏—Ç–∞–µ–º API-–∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_CREDENTIALS
SERVICE_ACCOUNT_INFO = json.loads(os.environ.get("GOOGLE_CREDENTIALS"))
credentials = service_account.Credentials.from_service_account_info(
SERVICE_ACCOUNT_INFO, scopes=SCOPES)
drive_service = build('drive', 'v3', credentials=credentials)

from datetime import datetime, timedelta

def delete_old_files(days=7):
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª—ã –∏–∑ Google Drive, –∫–æ—Ç–æ—Ä—ã–º –±–æ–ª—å—à–µ `days` –¥–Ω–µ–π."""
    cutoff_date = (datetime.utcnow() - timedelta(days=days)).isoformat() + 'Z'
    query = f"'{FOLDER_ID}' in parents and modifiedTime < '{cutoff_date}'"
    results = drive_service.files().list(q=query, fields="files(id, name, modifiedTime)").execute()
    files = results.get('files', [])

    if not files:
        print("‚úÖ –ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(files)} —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è...")

    for file in files:
        try:
            drive_service.files().delete(fileId=file['id']).execute()
            print(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª: {file['name']} (ID: {file['id']})")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file['name']}: {str(e)}")

def upload_to_drive(file_path, filename):
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –≤ Google Drive –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏."""
    file_metadata = {'name': filename, 'parents': [FOLDER_ID]}
    media = MediaFileUpload(file_path, resumable=True)
    file = drive_service.files().create(body=file_metadata, media_body=media, fields='id').execute()
    return f"https://drive.google.com/file/d/{file['id']}/view"

# –ú–æ–¥–µ–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class Order(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    store_name = db.Column(db.String(255), nullable=False)
    order_number = db.Column(db.String(50), nullable=False)
    comment = db.Column(db.Text, nullable=True)
    file_url = db.Column(db.String(255), nullable=False)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
with app.app_context():
    db.create_all()

import threading

def process_file_async(file_path, filename):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª –≤ —Ñ–æ–Ω–µ, —á—Ç–æ–±—ã Render –Ω–µ —É–±–∏–≤–∞–ª –ø—Ä–æ—Ü–µ—Å—Å."""
    thread = threading.Thread(target=upload_to_drive, args=(file_path, filename))
    thread.start()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
@app.route('/submit', methods=['POST'])
def submit_form():
    store_name = request.form.get('store_name')
    order_number = request.form.get('order_number')
    comment = request.form.get('comment', '')

    if not store_name or not order_number:
        return jsonify({'error': '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã'}), 400

    file = request.files.get('file')
    if not file:
        return jsonify({'error': '–§–∞–π–ª –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω'}), 400

    filename = secure_filename(file.filename)
    file_path = os.path.join("uploads", filename)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–ø–∫—É uploads
    cleanup_storage("uploads") # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    os.makedirs("uploads", exist_ok=True)  # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    file.save(file_path)

    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Google Drive
    process_file_async(file_path, filename)
    file_url = "Uploading file to Drive..."  # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞, –ø–æ–∫–∞ –∏–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞


    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    new_order = Order(store_name=store_name, order_number=order_number, comment=comment, file_url=file_url)
    db.session.add(new_order)
    db.session.commit()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ email
    msg = Message(f"{store_name} - #{order_number}", recipients=["woltvideo@gmail.com"])
    msg.body = f"""
    Venue name: {store_name}
    Order number: {order_number}
    Comment: {comment or 'left blank'}

    üìÇ Google Drive Link: {file_url}
    """

    # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º —Ñ–∞–π–ª –∫ email
    with open(file_path, "rb") as fp:
        msg.attach(filename, "application/octet-stream", fp.read())

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏, —á—Ç–æ–±—ã –ø–∏—Å—å–º–æ –Ω–µ —É—à–ª–æ –≤ —Å–ø–∞–º
    msg.headers = {
        "X-Mailer": "Flask-Mail",
        "X-Priority": "3",
        "Precedence": "bulk",
    }

    msg.reply_to = "support@wolt.com"
    mail.send(msg)
    os.remove(file_path)

    return jsonify({'message': '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'file_url': file_url}), 200  # ‚úÖ –¢–µ–ø–µ—Ä—å return –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —É—Ä–æ–≤–Ω–µ

from flask import render_template
from flask import send_from_directory

@app.route('/favicon.ico')
def favicon():
    return send_from_directory(os.path.join(app.root_path, 'static'), 'favicon.ico', mimetype='image/vnd.microsoft.icon')


# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ñ–æ—Ä–º–æ–π
@app.route('/')
def index():
    return render_template('index.html')  # –ó–∞–≥—Ä—É–∂–∞–µ–º HTML-—Ñ–æ—Ä–º—É


import threading
import requests
import time

def keep_alive():
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫ —Å–∞–π—Ç—É, —á—Ç–æ–±—ã Render –Ω–µ –∑–∞—Å—ã–ø–∞–ª"""
    while True:
        try:
            requests.get("https://flask-order-report.onrender.com")
            print("‚úÖ Keep-alive –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∏–Ω–≥–µ —Å–∞–π—Ç–∞:", e)
        time.sleep(300)  # 300 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç

# –ó–∞–ø—É—Å–∫–∞–µ–º keep_alive –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
thread = threading.Thread(target=keep_alive, daemon=True)
thread.start()

if __name__ == '__main__':
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
    delete_old_files(days=7)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
    app.run(debug=True)


